// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8755)
// Generated by LuaStick, Jun  3 2021.

#pragma once

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8763)
#include "stdafx.h"
// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8763)
#include "..\..\LuaStick\files\Sticklib.h"
// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8763)
#include "StickTestDlg.h"

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8773)
struct lua_State;
extern void luastick_init(lua_State* L);

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
template<>
void Sticklib::check_lvalue<::X*>(::X * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::X*>(lua_State * L, ::X * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::X&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::X*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::X*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::X*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the enum data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7667)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::X::Enum2&& head, Args&& ... args)
{
	Sticklib::push_lvalue<__int64>(L, (__int64)head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the enum data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7667)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, const ::X::Enum2&& head, Args&& ... args)
{
	Sticklib::push_lvalue<__int64>(L, (__int64)head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the enum data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7667)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::X::Enum1&& head, Args&& ... args)
{
	Sticklib::push_lvalue<__int64>(L, (__int64)head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the enum data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7667)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, const ::X::Enum1&& head, Args&& ... args)
{
	Sticklib::push_lvalue<__int64>(L, (__int64)head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
template<>
void Sticklib::check_lvalue<::X::A*>(::X::A * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::X::A*>(lua_State * L, ::X::A * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::X::A&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::X::A*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::X::A*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::X::A*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
template<>
void Sticklib::check_lvalue<::X::B*>(::X::B * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::X::B*>(lua_State * L, ::X::B * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::X::B&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::X::B*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::X::B*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::X::B*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
template<>
void Sticklib::check_lvalue<::NM1::NM1_NM2*>(::NM1::NM1_NM2 * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::NM1::NM1_NM2*>(lua_State * L, ::NM1::NM1_NM2 * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::NM1::NM1_NM2&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::NM1::NM1_NM2*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::NM1::NM1_NM2*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::NM1::NM1_NM2*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
template<>
void Sticklib::check_lvalue<::NM1::NM1_NM3*>(::NM1::NM1_NM3 * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::NM1::NM1_NM3*>(lua_State * L, ::NM1::NM1_NM3 * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::NM1::NM1_NM3&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::NM1::NM1_NM3*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::NM1::NM1_NM3*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::NM1::NM1_NM3*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
template<>
void Sticklib::check_lvalue<::C*>(::C * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::C*>(lua_State * L, ::C * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::C&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::C*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::C*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::C*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
template<>
void Sticklib::check_lvalue<::CStickTestDlg*>(::CStickTestDlg * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::CStickTestDlg*>(lua_State * L, ::CStickTestDlg * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::CStickTestDlg&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::CStickTestDlg*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7583)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::CStickTestDlg*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::CStickTestDlg*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}


#include "..\..\LuaStick\files\Stickrun.h"
