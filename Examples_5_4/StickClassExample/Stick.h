// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8807)
// Generated by LuaStick, Jun 11 2021.

#pragma once

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8815)
#include "stdafx.h"
// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8815)
#include "..\..\LuaStick\files\Sticklib.h"
// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8815)
#include "TestClass.h"
// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8815)
#include "StickClassExample.h"

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(8825)
struct lua_State;
extern void luastick_init(lua_State* L);

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7652)
template<>
void Sticklib::check_lvalue<::TestStruct0>(::TestStruct0 & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::TestStruct0>(lua_State * L, ::TestStruct0 const & value, bool own);

/// /// <summary>
/// Push the struct data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7652)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestStruct0&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestStruct0>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the struct data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7652)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, const ::TestStruct0&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestStruct0>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
template<>
void Sticklib::check_lvalue<::TestClass0*>(::TestClass0 * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::TestClass0*>(lua_State * L, ::TestClass0 * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestClass0&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestClass0*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestClass0*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestClass0*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the enum data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7690)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestClass0::EnumB&& head, Args&& ... args)
{
	Sticklib::push_lvalue<__int64>(L, (__int64)head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the enum data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7690)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, const ::TestClass0::EnumB&& head, Args&& ... args)
{
	Sticklib::push_lvalue<__int64>(L, (__int64)head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the enum data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7690)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestClass0::EnumA&& head, Args&& ... args)
{
	Sticklib::push_lvalue<__int64>(L, (__int64)head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the enum data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7690)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, const ::TestClass0::EnumA&& head, Args&& ... args)
{
	Sticklib::push_lvalue<__int64>(L, (__int64)head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7652)
template<>
void Sticklib::check_lvalue<::TestStruct1>(::TestStruct1 & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::TestStruct1>(lua_State * L, ::TestStruct1 const & value, bool own);

/// /// <summary>
/// Push the struct data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7652)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestStruct1&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestStruct1>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the struct data into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7652)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, const ::TestStruct1&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestStruct1>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
template<>
void Sticklib::check_lvalue<::TestClass1*>(::TestClass1 * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::TestClass1*>(lua_State * L, ::TestClass1 * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestClass1&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestClass1*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestClass1*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestClass1*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
template<>
void Sticklib::check_lvalue<::TestClass2*>(::TestClass2 * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::TestClass2*>(lua_State * L, ::TestClass2 * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestClass2&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestClass2*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::TestClass2*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::TestClass2*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
template<>
void Sticklib::check_lvalue<::CStickClassExampleApp*>(::CStickClassExampleApp * & value, lua_State * L, int arg);

template<>
void Sticklib::push_lvalue<::CStickClassExampleApp*>(lua_State * L, ::CStickClassExampleApp * const & value, bool own);

/// /// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::CStickClassExampleApp&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::CStickClassExampleApp*>(L, &head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}

/// <summary>
/// Push the class object into Lua stack.
/// Generated at "c:\src\lua\luastick\luastick\src\luastick.cpp"(7606)
/// </summary>
/// <param name="L">The l.</param>
/// <param name="data">The data.</param>
/// <returns>Number of arguments</returns>
template<typename ... Args>
int stick_pusharg(lua_State* L, void* data, ::CStickClassExampleApp*&& head, Args&& ... args)
{
	Sticklib::push_lvalue<::CStickClassExampleApp*>(L, head, false);
	return stick_pusharg(L, data, std::move(args)...) + 1;
}


#include "..\..\LuaStick\files\Stickrun.h"
